<?xml version="1.0" encoding="UTF-8"?><!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com) by Andrew Woolf (CCLRC) --><schema targetNamespace="http://ndg.nerc.ac.uk/csml" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:csml="http://ndg.nerc.ac.uk/csml" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.9">	<annotation>		<documentation>CSML storage descriptor</documentation>	</annotation>	<!--====================================================================== -->	<import namespace="http://www.w3.org/1999/xlink" schemaLocation="xlink/xlinks.xsd"/>	<!--====================================================================== -->	<!--====================================================================== -->	<!--===== CSML root storage descriptor element =====-->	<!--====================================================================== -->	<complexType name="CSMLStorageDescriptorType">		<sequence>			<element name="descriptor" minOccurs="0" maxOccurs="unbounded">				<complexType>					<sequence>						<element ref="csml:ArrayDescriptor"/>					</sequence>				</complexType>			</element>		</sequence>	</complexType>	<element name="CSMLStorageDescriptor" type="csml:CSMLStorageDescriptorType"/>	<!--====================================================================== -->	<!--====================================================================== -->	<!--===== CSML mechanisms for specifying values, providing alternatives for inline doubleLists =====-->	<!--====================================================================== -->	<!--====================================================================== -->	<complexType name="ArrayDescriptorType" abstract="true">		<annotation>			<documentation>An abstract type for prescribing an array of numeric values as an indirect realisation of numeric content.</documentation>		</annotation>		<sequence>			<element name="arraySize">				<simpleType>					<list itemType="int"/>				</simpleType>			</element>			<element name="uom" type="anyURI" minOccurs="0"/>			<element name="numericType" minOccurs="0">				<simpleType>					<restriction base="string">						<enumeration value="float"/>						<enumeration value="double"/>						<enumeration value="short"/>						<enumeration value="int"/>						<enumeration value="int8"/>						<enumeration value="int16"/>						<enumeration value="int32"/>						<enumeration value="int64"/>						<enumeration value="uint8"/>						<enumeration value="uint16"/>						<enumeration value="uint32"/>						<enumeration value="uint64"/>					</restriction>				</simpleType>			</element>			<element name="regExpTransform" type="string" minOccurs="0"/>			<element name="numericTransform" type="string" minOccurs="0"/>		</sequence>		<attribute name="id" type="ID"/>	</complexType>	<element name="ArrayDescriptor" type="csml:ArrayDescriptorType" abstract="true"/>	<complexType name="ArrayDescriptorPropertyType">		<sequence>			<element ref="csml:ArrayDescriptor"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="AggregatedArrayType">		<annotation>			<documentation>Uses the composite pattern to define an aggregation of arrays. The dimension along which aggregation is performed is specified ('aggIndex'), and refers either to a 'new' or 'existing' dimension (specified in 'aggType').</documentation>		</annotation>		<complexContent>			<extension base="csml:ArrayDescriptorType">				<sequence>					<element name="aggType">						<simpleType>							<restriction base="string">								<enumeration value="new"/>								<enumeration value="existing"/>							</restriction>						</simpleType>					</element>					<element name="aggIndex" type="int"/>					<element name="component" type="csml:ArrayDescriptorPropertyType" maxOccurs="unbounded"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="AggregatedArray" type="csml:AggregatedArrayType" substitutionGroup="csml:ArrayDescriptor"/>	<complexType name="AggregatedArrayPropertyType">		<sequence>			<element ref="csml:AggregatedArray"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="InlineArrayType">		<annotation>			<documentation>Enables values to be provided inline.</documentation>		</annotation>		<complexContent>			<extension base="csml:ArrayDescriptorType">				<sequence>					<element name="values">						<simpleType>							<list itemType="anySimpleType"/>						</simpleType>					</element>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="InlineArray" type="csml:InlineArrayType" substitutionGroup="csml:ArrayDescriptor"/>	<complexType name="InlineArrayPropertyType">		<sequence>			<element ref="csml:InlineArray"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="ArrayGeneratorType">		<complexContent>			<extension base="csml:ArrayDescriptorType">				<sequence>					<element name="expression" type="string"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="ArrayGenerator" type="csml:ArrayGeneratorType" substitutionGroup="csml:ArrayDescriptor"/>	<complexType name="ArrayGeneratorPropertyType">		<sequence>			<element ref="csml:ArrayGenerator"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="FileListType">		<sequence>			<element name="fileNames">				<simpleType>					<list itemType="anyURI"/>				</simpleType>			</element>		</sequence>		<attribute name="id" type="ID"/>	</complexType>	<element name="FileList" type="csml:FileListType"/>	<complexType name="FileListPropertyType">		<sequence minOccurs="0">			<element ref="csml:FileList"/>		</sequence>		<attributeGroup ref="xlink:simpleLink"/>	</complexType>	<!--====================================================================== -->	<complexType name="FileExtractType" abstract="true">		<complexContent>			<extension base="csml:ArrayDescriptorType">				<choice>					<element name="fileName" type="anyURI"/>					<element name="fileList" type="csml:FileListPropertyType"/>				</choice>			</extension>		</complexContent>	</complexType>	<element name="FileExtract" type="csml:FileExtractType" abstract="true" substitutionGroup="csml:ArrayDescriptor"/>	<!--====================================================================== -->	<complexType name="NASAAmesExtractType">		<complexContent>			<extension base="csml:FileExtractType">				<sequence>					<element name="variableName" type="string"/>					<element name="index" type="int" minOccurs="0"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="NASAAmesExtract" type="csml:NASAAmesExtractType" substitutionGroup="csml:FileExtract"/>	<complexType name="NASAAmesExtractPropertyType">		<sequence>			<element ref="csml:NASAAmesExtract"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="NetCDFExtractType">		<complexContent>			<extension base="csml:FileExtractType">				<sequence>					<element name="variableName" type="string"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="NetCDFExtract" type="csml:NetCDFExtractType" substitutionGroup="csml:FileExtract"/>	<complexType name="NetCDFExtractPropertyType">		<sequence>			<element ref="csml:NetCDFExtract"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="GRIBExtractType">		<complexContent>			<extension base="csml:FileExtractType">				<sequence>					<element name="parameterCode" type="int"/>					<element name="recordNumber" type="int" minOccurs="0"/>					<element name="fileOffset" type="int" minOccurs="0"/>					<element name="ctlVariableName" type="string" minOccurs="0"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="GRIBExtract" type="csml:GRIBExtractType" substitutionGroup="csml:FileExtract"/>	<complexType name="GRIBExtractPropertyType">		<sequence>			<element ref="csml:GRIBExtract"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="CDMLExtractType">		<complexContent>			<extension base="csml:NetCDFExtractType"/>		</complexContent>	</complexType>	<element name="CDMLExtract" substitutionGroup="csml:NetCDFExtract"/>	<complexType name="CDMLExtractPropertyType">		<sequence>			<element ref="csml:CDMLExtract"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="RawFileExtractType">		<complexContent>			<extension base="csml:FileExtractType">				<sequence>					<element name="endianness" type="string" minOccurs="0"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="RawFileExtract" type="csml:RawFileExtractType" substitutionGroup="csml:FileExtract"/>	<!--====================================================================== -->	<complexType name="RawFileExtractPropertyType">		<sequence>			<element ref="csml:RawFileExtract"/>		</sequence>	</complexType>	<!--====================================================================== -->	<complexType name="ImageFileExtractType">		<complexContent>			<extension base="csml:FileExtractType">				<sequence>					<element name="format" type="string"/>				</sequence>			</extension>		</complexContent>	</complexType>	<element name="ImageFileExtract" type="csml:ImageFileExtractType" substitutionGroup="csml:FileExtract"/>	<!--====================================================================== -->	<complexType name="ImageFileExtractPropertyType">		<sequence>			<element ref="csml:ImageFileExtract"/>		</sequence>	</complexType>	<!--====================================================================== -->	<!--====================================================================== -->	<!--====================================================================== -->	<!--====================================================================== --></schema>